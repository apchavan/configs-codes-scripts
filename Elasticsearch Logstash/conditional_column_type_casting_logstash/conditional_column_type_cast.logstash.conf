# Logstash configuration file that shows how to use condition before performing type casting of column values.
# It'll help to avoid possible errors that can come up during type cast operation.

input {
    file {
        # Path to load input files from
        path => "/PATH/TO/DATA_DIRECTORY/*.csv"
        start_position => "beginning"

        # File that keeps track of the current position of monitored log files
        sincedb_path => "/PATH/TO/sincedb_file"  # Or can be "/dev/null"
        file_completed_action => "log"
        file_completed_log_path => "/dev/null"

        # Stop logstash process after reading all files from path
        exit_after_read => true
        mode => "read"
    }
}
filter {
    csv {
        # Columns to read from CSV file from input source
        columns => [
            "VEHICLE_ID",
            "FRAME_NO",
            "ENGINE_NO",
            "KEY_NO",
            "PART_ID",
            "MODEL_ID",
            "FRONT_TYRE_MAKE",
            "REAR_TYRE_MAKE",
            "BATTERY_MAKE",
            "BATTERY_NO",
            "FIELD_1",
            "FIELD_2",
            "FIELD_3",
            "FIELD_4",
            "FIELD_5",
            "TVS_INV_PRICE",
            "REG_NO",
            "SALE_DATE",
            "PLANT_ID",
            "PROD_MON",
            "PROD_YR",
            "GRN_DATE",
            "UNIQUE_NO",
            "CUR_ODOM_READ",
            "CUM_ODOM_READ",
            "REPLACED_AT",
            "LAST_JOB_CARD_DATE",
            "AMC_ID",
            "INS_TYPE_ID",
            "INS_COMP_ID",
            "INS_CUST_ID",
            "INS_POLICY_NO",
            "INS_POLICY_DT",
            "INS_VALID_FROM",
            "INS_VALID_TILL",
            "IS_VEH_REGI",
            "IS_CST_PUR",
            "EX_SHRM_PRICE",
            "DLR_PAID_TAX",
            "REF_CUST_ID",
            "SALE_THR_ASC_ID",
            "STATUS",
            "BASIC_PRICE",
            "INPUT_TAX_VALUE",
            "Service_Booklet_No",
            "CREATED_BY",
            "CREATED_ON",
            "MODIFIED_BY",
            "MODIFIED_ON",
            "ACTIVE",
            "IS_OLD_VEHICLE",
            "WARRANTY_BOOKELET_NO",
            "POLICY_NO",
            "AMC_TYPE",
            "IS_THRU_UPLOAD",
            "WELCOME_KIT_ID",
            "CRM_WELCOME_KIT_NO",
            "CWI_WARR_TILL_DATE",
            "CWI_WARR_FROM_DATE",
            "AMC_BOOKLET_NO",
            "CGST",
            "SGST",
            "IGST",
            "UTGST",
            "NO_OF_OWNERS",
            "IS_EV_VEH",
            "SIM_CARD_NO",
            "TCS",
            "IS_THRU_ANGULAR",
            "OFF_DEALER_ID",
            "OFF_VEHICLE_ID",
            "IS_THR_DIGI",
            "CWI_POLICY_NO",
            "TYRE_REPLACE",
            "TYRE_REPLACED_KM",
            "IS_Unlock_PDI",
            "Reason"
        ]
        separator => ","
        remove_field => [
            "message"
        ]
    }
    # Cast data-type of `SALE_DATE` column to date
    if [SALE_DATE] != 'null' and [SALE_DATE] != '' {
        date {
            match => ["SALE_DATE", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `GRN_DATE` column to date
    if [GRN_DATE] != 'null' and [GRN_DATE] != '' {
        date {
            match => ["GRN_DATE", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `LAST_JOB_CARD_DATE` column to date
    if [LAST_JOB_CARD_DATE] != 'null' and [LAST_JOB_CARD_DATE] != '' {
        date {
            match => ["LAST_JOB_CARD_DATE", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `INS_POLICY_DT` column to date
    if [INS_POLICY_DT] != 'null' and [INS_POLICY_DT] != '' {
        date {
            match => ["INS_POLICY_DT", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `INS_VALID_FROM` column to date
    if [INS_VALID_FROM] != 'null' and [INS_VALID_FROM] != '' {
        date {
            match => ["INS_VALID_FROM", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `INS_VALID_TILL` column to date
    if [INS_VALID_TILL] != 'null' and [INS_VALID_TILL] != '' {
        date {
            match => ["INS_VALID_TILL", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `CREATED_ON` column to date
    if [CREATED_ON] != 'null' and [CREATED_ON] != '' {
        date {
            match => ["CREATED_ON", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `MODIFIED_ON` column to date
    if [MODIFIED_ON] != 'null' and [MODIFIED_ON] != '' {
        date {
            match => ["MODIFIED_ON", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `CWI_WARR_TILL_DATE` column to date
    if [CWI_WARR_TILL_DATE] != 'null' and [CWI_WARR_TILL_DATE] != '' {
        date {
            match => ["CWI_WARR_TILL_DATE", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    # Cast data-type of `CWI_WARR_FROM_DATE` column to date
    if [CWI_WARR_FROM_DATE] != 'null' and [CWI_WARR_FROM_DATE] != '' {
        date {
            match => ["CWI_WARR_FROM_DATE", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
        }
    }
    mutate {
        # Strip/trim white-spaces before & after
        strip => [
            "FRAME_NO",
            "ENGINE_NO",
            "KEY_NO",
            "PART_ID",
            "MODEL_ID",
            "FRONT_TYRE_MAKE",
            "REAR_TYRE_MAKE",
            "BATTERY_MAKE",
            "BATTERY_NO",
            "FIELD_1",
            "FIELD_2",
            "FIELD_3",
            "FIELD_4",
            "FIELD_5",
            "REG_NO",
            "PLANT_ID",
            "INS_CUST_ID",
            "INS_POLICY_NO",
            "Service_Booklet_No",
            "WARRANTY_BOOKELET_NO",
            "POLICY_NO",
            "CRM_WELCOME_KIT_NO",
            "AMC_BOOKLET_NO",
            "SIM_CARD_NO",
            "CWI_POLICY_NO",
            "Reason"
        ]
        # Set column value datatypes
        convert => {
            "VEHICLE_ID" => "integer"
            "TVS_INV_PRICE" => "float"
            "PROD_MON" => "integer"
            "PROD_YR" => "integer"
            "UNIQUE_NO" => "integer"
            "CUR_ODOM_READ" => "integer"
            "CUM_ODOM_READ" => "integer"
            "REPLACED_AT" => "integer"
            "AMC_ID" => "integer"
            "INS_TYPE_ID" => "integer"
            "INS_COMP_ID" => "integer"
            "IS_VEH_REGI" => "boolean"
            "IS_CST_PUR" => "boolean"
            "EX_SHRM_PRICE" => "float"
            "DLR_PAID_TAX" => "float"
            "REF_CUST_ID" => "integer"
            "SALE_THR_ASC_ID" => "integer"
            "STATUS" => "integer"
            "BASIC_PRICE" => "float"
            "INPUT_TAX_VALUE" => "float"
            "CREATED_BY" => "integer"
            "MODIFIED_BY" => "integer"
            "ACTIVE" => "boolean"
            "IS_OLD_VEHICLE" => "boolean"
            "AMC_TYPE" => "integer"
            "IS_THRU_UPLOAD" => "boolean"
            "WELCOME_KIT_ID" => "integer"
            "CGST" => "float"
            "SGST" => "float"
            "IGST" => "float"
            "UTGST" => "float"
            "NO_OF_OWNERS" => "integer"
            "IS_EV_VEH" => "boolean"
            "TCS" => "float"
            "IS_THRU_ANGULAR" => "boolean"
            "OFF_DEALER_ID" => "integer"
            "OFF_VEHICLE_ID" => "integer"
            "IS_THR_DIGI" => "boolean"
            "TYRE_REPLACE" => "integer"
            "TYRE_REPLACED_KM" => "float"
            "IS_Unlock_PDI" => "boolean"
        }
    }
}
output {
    elasticsearch {
        hosts => ["http://localhost:9200"]
        user => "elastic"
        password => "PASSWORD_FOR_ELASTIC_USER"
        index => "INDEX_NAME_TO_CREATE"
        document_id => "%{FRAME_NO}"
        #ssl => true
        #cacert => "/usr/share/logstash/http_ca.crt"
    }
    #stdout { codec => rubydebug }
}

